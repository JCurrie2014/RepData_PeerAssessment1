```{r}
plot(sumstepsinterval$avgstepperday,type="l", xaxt="n",  xlab="5-minute step intervals", ylab="Avg steps per day")
axis(1, at=c(1,50,100,150,200,250), labels=t(sumstepsinterval[c(1,50,100,150,200,250),"interval"]))
```
The time inteval ''`r paste(maxavgstepperday$interval,maxavgstepperday$interval+5,sep="-")`'' contains the highest average number of steps at: `r round(maxavgstepperday$avgstepperday,2)` per day
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
lt<-as.POSIXlt("1970-01-01 00:00:00 PST")
lt$min=lt$min+835
lt
lt<-as.POSIXlt("1970-01-01 00:00:00 PST")
maxavgstepperday
p<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
p$min<-p$min + maxavgstepperday$interval
p
p$hr
p$hour
unclass(p)
p
times <- strptime("23:03:20","%H:%M:%S"")
times <- strptime("23:03:20","%H:%M:%S")
times
class(times)
unclass(times)
p
p<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
p$min<-p$min + maxavgstepperday$interval
pcvt<-toString(p)
pcvt
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + maxavgstepperday$interval
tcvt<-toString(t)
t
t$min
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + maxavgstepperday$interval
strftime(t, format = "%I:%M:%S"
tcvt<-toString(t)
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + maxavgstepperday$interval
strftime(t, format = "%I:%M:%S")
tcvt<-toString(t)
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + maxavgstepperday$interval
tcvt<-strftime(t, format = "%I:%M:%S")
tcvt
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + maxavgstepperday$interval
tcvt<-strftime(t, format = "%I:%M:%S %p")
tcvt
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
#t$min<-t$min + maxavgstepperday$interval
tcvt<-strftime(t$min + maxavgstepperday$interval, format = "%I:%M:%S %p")
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + maxavgstepperday$interval
tcvt<-strftime(t, format = "%I:%M:%S %p")
View(dfactnaf)
sumstepsinterval$K<-sumstepsinterval$interval+1000
View(sumstepsinterval)
View(sumstepsinterval)
sumstepsinterval$K<-toString(sumstepsinterval$interval+1000)
View(sumstepsinterval)
View(sumstepsinterval)
sumstepsinterval$K<-sumstepsinterval$interval+1000
View(sumstepsinterval)
View(sumstepsinterval)
title: "Reproducible Research: Peer Assessment 1"
author: "Jerry Currie"
date: "2015-02-12"
output:
html_document:
keep_md: true
---
## Load Libraries
- dplyr
- lubridate
```{r}
library(dplyr)
library(lubridate)
```
## Loading and preprocessing the data
```{r}
#Read data file
dfactivity<-read.csv("activity.csv")
dfactnaf<-na.omit(dfactivity) #dataset without NAs
dfactnaf$wkday<-wday(dfactnaf$date)
#Populate variables
grp <- group_by(dfactnaf, date) #Group by date
grp2<-group_by(dfactnaf,wkday) #Group by week day
grp3<-group_by(dfactnaf,interval) #Group by interval
sumsteps<-summarise(grp, sum=sum(steps)) #sum steps by day
sumstepswday<-summarise(grp2, sum=sum(steps)) #sum steps by weekday
sumstepswday$dayname<-c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")
names(sumstepswday)[2]<-"steps"
sumstepsinterval<-summarise(grp3, sum=sum(steps)) #average steps by interval
sumstepsinterval$avgstepperday<-sumstepsinterval$sum/nrow(sumsteps)
sumstepsinterval$K<-sumstepsinterval$interval+1000 #build interval string for time
#Get max avg step per day info
maxavgstepperday<-sumstepsinterval[which(sumstepsinterval[, 3] == max(sumstepsinterval$avgstepperday)), ]
#Calclate mean and median outputs
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + maxavgstepperday$interval
maxavgstepperday$interval
maxavgstepperday$K
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
t$min<-t$min + substr(maxavgstepperday$interval,3,2)
t$min<-t$min + substr(toString(maxavgstepperday$K),3,2)
t$min<-t$min + substr(maxavgstepperday$K,3,2)
maxavgstepperday$K
t$min<-t$min + substr(as.character(maxavgstepperday$K),3,2)
sumstepsinterval$K<-as.character(sumstepsinterval$interval+1000) #build interval string for time
sumstepsinterval$K
t$min<-t$min + substr(maxavgstepperday$K,3,2)
substr(maxavgstepperday$K,3,2)
maxavgstepperday$K
sumstepsinterval$K<-as.character(sumstepsinterval$interval+1000) #build interval string for time
class(maxavgstepperday$K)
t$min<-t$min + substr(as.character(maxavgstepperday$K),3,2)
tmptim<-as.character(maxavgstepperday$K)
class(tmptim)
t$min<-t$min + substr(tmptim,3,2)
tmptim
t$min<-t$min + substr(tmptim,1,2)
tmptim<-toString(maxavgstepperday$K)
t$min<-t$min + substr(tmptim,1,2)
tmptim
length(tmptim)
class(tmptim)
?substr
substr(tmptim,1,2)
tmptim<-substr(toString(maxavgstepperday$K),1,2)
tmptim
tmptim<-substr(toString(maxavgstepperday$K),3,4)
tmptim
sumstepsinterval$K<-sumstepsinterval$interval+10000 #build interval string for time
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmphour<-substr(toString(maxavgstepperday$K),2,3)
tmpmin
tmphour
View(sumstepsinterval)
tmpmin<-substr(toString(maxavgstepperday$K),3,5)
tmpmin
grp <- group_by(dfactnaf, date) #Group by date
grp2<-group_by(dfactnaf,wkday) #Group by week day
grp3<-group_by(dfactnaf,interval) #Group by interval
sumsteps<-summarise(grp, sum=sum(steps)) #sum steps by day
sumstepswday<-summarise(grp2, sum=sum(steps)) #sum steps by weekday
sumstepswday$dayname<-c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")
names(sumstepswday)[2]<-"steps"
sumstepsinterval<-summarise(grp3, sum=sum(steps)) #average steps by interval
sumstepsinterval$avgstepperday<-sumstepsinterval$sum/nrow(sumsteps)
sumstepsinterval$K<-sumstepsinterval$interval+10000 #build interval string for time
tmpmin
tmphour
tmphour<-substr(toString(maxavgstepperday$K),1,3)
tmphour
maxavgstepperday$K
sumstepsinterval$K<-sumstepsinterval$interval+10000 #build interval string for time
maxavgstepperday$K
View(sumstepsinterval)
View(sumstepsinterval)
sumstepsinterval$K
tmpmin<-substr(toString(maxavgstepperday$K),3,5)
tmpmin
tmphour<-substr(toString(maxavgstepperday$K),1,3)
tmphour
tmpmin<-substr(toString(maxavgstepperday$K),3,2)
tmphour<-substr(toString(maxavgstepperday$K),1,2)
tmpmin
tmphour
maxavgstepperday
#Read data file
dfactivity<-read.csv("activity.csv")
dfactnaf<-na.omit(dfactivity) #dataset without NAs
dfactnaf$wkday<-wday(dfactnaf$date)
#Populate variables
grp <- group_by(dfactnaf, date) #Group by date
grp2<-group_by(dfactnaf,wkday) #Group by week day
grp3<-group_by(dfactnaf,interval) #Group by interval
sumsteps<-summarise(grp, sum=sum(steps)) #sum steps by day
sumstepswday<-summarise(grp2, sum=sum(steps)) #sum steps by weekday
sumstepswday$dayname<-c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")
names(sumstepswday)[2]<-"steps"
sumstepsinterval<-summarise(grp3, sum=sum(steps)) #average steps by interval
sumstepsinterval$avgstepperday<-sumstepsinterval$sum/nrow(sumsteps)
sumstepsinterval$K<-sumstepsinterval$interval+10000 #build interval string for time
#Get max avg step per day info
maxavgstepperday<-sumstepsinterval[which(sumstepsinterval[, 3] == max(sumstepsinterval$avgstepperday)), ]
#Calclate mean and median outputs
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
tmpmin<-substr(toString(maxavgstepperday$K),3,2)
tmphour<-substr(toString(maxavgstepperday$K),1,2)
t$min<-t$min + substr(tmptim,1,2)
tmpmin<-substr(toString(maxavgstepperday$K),3,2)
View(sumstepsinterval)
View(maxavgstepperday)
tmpmin<-substr(toString(maxavgstepperday$K),3,2)
tmphour<-substr(toString(maxavgstepperday$K),1,2)
tmphour
tmpmin
tmphour<-substr(toString(maxavgstepperday$K),2,3)
tmphour
tmpmin<-substr(toString(maxavgstepperday$K),3,5)
tmpmin
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmpmin
tmphour
#Calclate mean and median outputs
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmphour<-substr(toString(maxavgstepperday$K),2,3)
t$min<-t$min + substr(tmptim,1,2)
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmphour<-substr(toString(maxavgstepperday$K),2,3)
t$min<-t$min + tmpmin
t$hour<-t$hour+tmphour
t$min<-t$min + tmpmin
t$min<-t$min + as.numeric(tmpmin)
t$hour<-t$hour+as.numeric(tmphour)
#Calclate mean and median outputs
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmphour<-substr(toString(maxavgstepperday$K),2,3)
t$min<-t$min + as.numeric(tmpmin)
t$hour<-t$hour+as.numeric(tmphour)
#Calclate mean and median outputs
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmphour<-substr(toString(maxavgstepperday$K),2,3)
t$min<-t$min + as.numeric(tmpmin)
t$hour<-t$hour+as.numeric(tmphour)
tcvt<-strftime(t, format = "%I:%M:%S %p")
tcvt
axis(1, at=c(1,49,97,145,193,241), labels=t(sumstepsinterval[c("12:00","4:00","8:00","12:00","4:00","8:00"),"interval"]))
plot(sumstepsinterval$avgstepperday,type="l", xaxt="n",  xlab="5-minute step intervals", ylab="Avg steps per day")
axis(1, at=c(1,49,97,145,193,241), labels=t(sumstepsinterval[c("12:00","4:00","8:00","12:00","4:00","8:00"),"interval"]))
axis(1, at=c(1,49,97,145,193,241), labels=c("12:00","4:00","8:00","12:00","4:00","8:00"))
axis(1, at=c(1,49,97,145,193,241,288), labels=c("12:00","4:00","8:00","12:00","4:00","8:00","12:00"))
plot(sumstepsinterval$avgstepperday,type="l", xaxt="n",  xlab="5-minute step intervals", ylab="Avg steps per day")
axis(1, at=c(1,49,97,145,193,241,288), labels=c("12:00","4:00","8:00","12:00","4:00","8:00","12:00"))
plot(sumstepsinterval$avgstepperday,type="l", xaxt="n",  xlab="5-minute step intervals", ylab="Avg steps per day")
axis(1, at=c(1,49,97,145,193,241,288), labels=c("12:00 am","4:00","8:00","12:00","4:00","8:00","12:00 am"))
axis(1, at=c(1,49,97,145,193,241,288), labels=c("12:00 am","4:00","8:00","12:00 noon","4:00","8:00","12:00 am"))
axis(1, at=c(1,49,97,145,193,241,288), labels=c("12:00 am","4:00","8:00","12:00 pm","4:00","8:00","12:00 am"))
plot(sumstepsinterval$avgstepperday,type="l", xaxt="n",  xlab="5-minute step intervals", ylab="Avg steps per day")
axis(1, at=c(1,49,97,145,193,241,288), labels=c("12:00 am","4:00","8:00","12:00 pm","4:00","8:00","12:00 am"))
sumna<-sum(is.na(dfactivity$col))
View(dfactivity)
View(dfactivity)
sumna<-sum(is.na(dfactivity$step))
sumna
sum(is.na(dfactivity))
View(dfactivity)
View(dfactivity)
View(dfactnaf)
View(sumstepsinterval)
View(sumstepsinterval)
View(dfactivity)
#Read data file
dfactivity<-read.csv("activity.csv")
dfactivity$id<-1:nrow(dfactivity)
dfactnaf<-na.omit(dfactivity) #dataset without NAs
dfactnaf$wkday<-wday(dfactnaf$date)
---
title: "Reproducible Research: Peer Assessment 1"
author: "Jerry Currie"
date: "2015-02-12"
output:
html_document:
keep_md: true
---
## Load Libraries
- dplyr
- lubridate
```{r}
library(dplyr)
library(lubridate)
```
## Loading and preprocessing the data
```{r}
#Read data file
dfactivity<-read.csv("activity.csv")
dfactivity$id<-1:nrow(dfactivity)
dfactnaf<-na.omit(dfactivity) #dataset without NAs
dfactnaf$wkday<-wday(dfactnaf$date)
#Populate variables for histogram and averages
grp <- group_by(dfactnaf, date) #Group by date
sumsteps<-summarise(grp, sum=sum(steps)) #sum steps by day
#Calclate mean and median outputs
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
```
## What is mean total number of steps taken per day?
Calculate mean totals number of steps taken per day
excluding NAs and place into variable named mnsteps.
```{r}
#histogram of steps per day
hist(sumsteps$sum, main="Steps per day",ylab="Frequency", xlab="Steps", breaks=nrow(sumsteps), col="red")
```
- The average (mean) number of steps is <b>`r format(meanperday, big.mark=",")`</b> over `r nrow(sumsteps)` days.
- The median number of steps is <b>`r format(medianperday, big.mark=",")`</b> over `r nrow(sumsteps)` days.
```{r}
grp2<-group_by(dfactnaf,wkday) #Group by week day
grp3<-group_by(dfactnaf,interval) #Group by interval
sumstepswday<-summarise(grp2, sum=sum(steps)) #sum steps by weekday
sumstepswday$dayname<-c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")
names(sumstepswday)[2]<-"steps"
sumstepsinterval<-summarise(grp3, sum=sum(steps)) #average steps by interval
sumstepsinterval$avgstepperday<-sumstepsinterval$sum/nrow(sumsteps)
#build interval string for time by additing 10000 to each interval.
#this will allows taking the 2&3 values as hours and the 4&5 values
#as minutes without incurring an error from the earlier time intervals.
sumstepsinterval$K<-sumstepsinterval$interval+10000
#Get max avg step per day info
maxavgstepperday<-sumstepsinterval[which(sumstepsinterval[, 3] == max(sumstepsinterval$avgstepperday)), ]
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmphour<-substr(toString(maxavgstepperday$K),2,3)
t$min<-t$min + as.numeric(tmpmin)
t$hour<-t$hour+as.numeric(tmphour)
tcvt<-strftime(t, format = "%I:%M:%S %p")
```
## What is the average daily activity pattern?
### Weekday Activity
There are `r nrow(sumstepsinterval)` 5-minute time intervals ranging from 0 to 2355.
```{r}
plot(sumstepsinterval$avgstepperday,type="l", xaxt="n",  xlab="5-minute step intervals", ylab="Avg steps per day", main="Average Daily Activity")
axis(1, at=c(1,49,97,145,193,241,288), labels=c("12:00 am","4:00","8:00","12:00 pm","4:00","8:00","12:00 am"))
```
- The time inteval ''`r paste(maxavgstepperday$interval,maxavgstepperday$interval+5,sep="-")`'' contains the highest average number of steps at: <b>`r round(maxavgstepperday$avgstepperday,2)`</b> per day
The most popular time of day for stepping is:<b> `r tcvt`</b>.
(note: The data contains 12 5-minute groups per hour (0-55). After reaching the 12th member of the group (interval ending in 55), the interval's hundred digit is incremented representing the current hour (i.e. The interval 100=1:00 am, 105=1:05 am ... 2355 = 11:55 pm.))
## Imputing missing values
View(sumstepswday)
View(dfactivity)
View(dfactivity)
dfisna<-dfactivity[is.na[,3]==TRUE,]
dfisna<-subset(dfactivity[is.na[,2]==TRUE,])
dfisna<-subset(dfactivity[[,2]==NA,])
dfisna<-subset(dfactivity[is.na==TRUE,2],])
dfisna<-subset(dfactivity[[is.na==TRUE,2],])
dfisna<-subset(dfactivity[[is.na==TRUE,2],])
dfactivity[[is.na==TRUE,2],]
dfactivity[[is.na==TRUE],2]
dfactivity([is.na==TRUE],2)
dfactivity[is.na([,2]),]
dfactivity[is.na([,2])==TRUE,]
dfisna<-dfactivity[[is.na==TRUE,2],]
dfisna<-dfactivity[[,2]==NA,]
dfisna<-dfactivity[is.na([,2])==TRUE,]
dfisna<-dfactivity[dfactivity[is.na([,2])==TRUE,]]
dfisna<-dfactivity[dfactivity[is.na[,2]==TRUE,]]
dfisna<-dfactivity[dfactivity[,2]==TRUE,]]
dfisna<-dfactivity[dfactivity[,2]==TRUE,]]]
dfisna<-dfactivity[dfactivity[,2]==TRUE,]
dfisna<-dfactivity[is.na(dfactivity[,2])==TRUE,]
View(dfisna)
dfisna<-dfactivity[dfactivity[is.na==T,2]),]
dfisna<-dfactivity[dfactivity[,is.na(2)==T]),]
dfisna<-dfactivity[dfactivity[,is.na(2)==T],]
dfisna<-dfactivity[dfactivity[,2],]
View(dfactivity)
View(dfactivity)
dfisna<-dfactivity[is.na(dfactivity[,1])==T,]
View(dfisna)
View(dfisna)
View(sumstepsinterval)
View(dfactnaf)
View(dfactnaf)
View(dfactnaf)
View(dfisna)
View(dfactnaf)
View(sumstepsinterval)
View(sumstepsinterval)
View(dfisna)
View(dfactnaf)
View(sumsteps)
grp2<-group_by(dfactnaf,interval) #Group by interval
sumstepsinterval<-summarise(grp2, sum=sum(steps)) #average steps by interval
sumstepsinterval$avgstepperday<-sumstepsinterval$sum/nrow(sumsteps)
#build interval string for time by additing 10000 to each interval.
#this will allows taking the 2&3 values as hours and the 4&5 values
#as minutes without incurring an error from the earlier time intervals.
sumstepsinterval$K<-sumstepsinterval$interval+10000
#Get max avg step per day info
maxavgstepperday<-sumstepsinterval[which(sumstepsinterval[, 3] == max(sumstepsinterval$avgstepperday)), ]
#Calculate time of day from 5-minute interval
t<-as.POSIXlt("1970-01-01 00:00:00 PST") #initialize time
tmpmin<-substr(toString(maxavgstepperday$K),4,5)
tmphour<-substr(toString(maxavgstepperday$K),2,3)
t$min<-t$min + as.numeric(tmpmin)
t$hour<-t$hour+as.numeric(tmphour)
tcvt<-strftime(t, format = "%I:%M:%S %p")
dfactivity<-read.csv("activity.csv")
dfactivity$id<-1:nrow(dfactivity)
dfactnaf<-na.omit(dfactivity) #dataset without NAs
dfactnaf$wkday<-wday(dfactnaf$date)
#Populate variables for histogram and averages
grp <- group_by(dfactnaf, date) #Group by date
sumsteps<-summarise(grp, sum=sum(steps)) #sum steps by day
#Calclate mean and median outputs
meanperday<-mean(sumsteps$sum)  #calculate mean steps per day
medianperday<-median(sumsteps$sum) #calculate median steps per day
View(dfactnaf)
dfactnaf<-na.omit(dfactivity) #dataset without NAs
View(dfactnaf)
View(dfisna)
View(dfactivity)
a<-merge(dfisna, sumstepsinterval, by interval)
a<-merge(dfisna, sumstepsinterval, by="interval")
View(a)
ajoin<-merge(dfisna, sumstepsinterval, by="interval")
rm(a)
ajoin$step<-ajoin$avgstepperday
View(ajoin)
ajoin$steps<-ajoin$avgstepperday
View(ajoin)
ajoin$step<-NULL
View(ajoin)
View(ajoin)
View(ajoin)
View(dfactivity)
View(dfactnaf)
View(dfactivity)
View(dfactnaf)
dfactnaf[1,1]
View(ajoin)
newactivity<-rbind(dfactnaf, dfisna[,c(1:4)])
View(dfactivity)
newactivity<-rbind(dfactnaf, ajoin[,c(1:4)])
View(newactivity)
newactivity<-newactivity[order(id),)
newactivity<-newactivity[order(id),]
newactivity<-rbind(dfactnaf, ajoin[,c(1:4)])
newactivity2<-newactivity[order(id),]
newactivity2<-newactivity[order(id),]
View(ajoin)
View(newactivity)
?arrange
arrange(newactivity, id)
View(newactivity)
newactivity<-arrange(tempactivity, id)
tempactivity<-rbind(dfactnaf, ajoin[,c(1:4)])
newactivity<-arrange(tempactivity, id)
View(newactivity)
#Populate variables for histogram and averages
grp3 <- group_by(newactivity, date) #Group by date
sumsteps3<-summarise(grp3, sum=sum(steps)) #sum steps by day
#Calclate mean and median outputs
meanperday3<-mean(sumsteps3$sum)  #calculate mean steps per day
medianperday3<-median(sumsteps3$sum) #calculate median steps per day
View(sumsteps3)
View(sumsteps)
View(newactivity)
View(sumsteps3)
View(sumsteps)
?weekday
?weekdays
newactivity$weekday<-weekdays(newactivity,abbreviate=FALSE)
weekdays(newactivity,abbreviate=FALSE)
newactivity$weekday<-weekdays(newactivity$date,abbreviate=FALSE)
newactivity$weekday<-isWeekend(newcativity$date)
?isWeekend
??isWeekend
newactivity$weekday<-isWeekday(newcativity$date)
install.packages("timeDate")
library(dplyr)
library(lubridate)
library(timeDate)
newactivity$weekday<-isWeekday(newcativity$date)
newactivity$weekday<-isWeekday(newactivity$date)
View(newactivity)
sum(newactivity$weekday)
newactivity$weekday<-isWeekday(newactivity$date)
View(newactivity)
sum(newactivity$weekday)
newactivity$weekday[isWeekday(newactivity$date) == T] <- "Weekday"
newactivity$weekday[isWeekday(newactivity$date) == T] <- "Weekday"
newactivity$weekday[isWeekday(newactivity$date) == F] <- "Weekend"
View(newactivity)
View(newactivity)
sum(newactivity$weekday[newactivity[,"weekday"]=="weekend"])
factor(newactivity$weekday)
levels(factor(newactivity$weekday))
newactivity[which(newactivity[, "weekday"] == "weekend", ]
newactivity[which(newactivity[, "weekday"] == "weekend", ]]
newactivity[which(newactivity[, "weekday"] == "weekend"), ]]
newactivity[which(newactivity[, "weekday"] == "weekend"), ]
newactivity[which(newactivity[, 5] == "weekend"), ]
newactivity[which(newactivity[, 5] === "weekend"), ]
newactivity[which(newactivity[, 5] =="weekend"), ]
newactivity[which(newactivity[, 5] =="weekday"), ]
