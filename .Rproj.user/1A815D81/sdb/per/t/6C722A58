{
    "contents" : "---\ntitle: \"Reproducible Research: Peer Assessment 1\"\nauthor: \"Jerry Currie\"\ndate: \"2015-02-12\"\noutput:  \n  html_document: \n    keep_md: true\n---\n\n## Load Libraries\n- dplyr\n- lubridate\n- timeDate\n```{r}\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(timeDate)\n```\n## Loading and preprocessing the data\n```{r}\n#Read data file \ndfactivity<-read.csv(\"activity.csv\")\ndfactivity$id<-1:nrow(dfactivity)\ndfactnaf<-na.omit(dfactivity) #dataset without NAs\n \n\n#Populate variables for histogram and averages\ngrp <- group_by(dfactnaf, date) #Group by date\nsumsteps<-summarise(grp, sum=sum(steps)) #sum steps by day\n\n#Calclate mean and median outputs\nmeanperday<-mean(sumsteps$sum)  #calculate mean steps per day\nmedianperday<-median(sumsteps$sum) #calculate median steps per day\n\n\n```\n\n## What is mean total number of steps taken per day?\nThe histogram (below) shows number of steps per day grouped into clusters.\nThe frequency represents the number of times data fell into each\ncluster.\n\n```{r}\n#histogram of steps per day\nhist(sumsteps$sum, main=\"Steps per day\",ylab=\"Frequency\", xlab=\"Steps\", breaks=nrow(sumsteps), col=\"red\")\n```\n \n- The average (mean) number of steps is <b>`r format(meanperday, big.mark=\",\")`</b> over `r nrow(sumsteps)` days.\n- The median number of steps is <b>`r format(medianperday, big.mark=\",\")`</b> over `r nrow(sumsteps)` days.\n\n```{r}\ngrp2<-group_by(dfactnaf,interval) #Group by interval\nsumstepsinterval<-summarise(grp2, sum=sum(steps)) #average steps by interval\nsumstepsinterval$avgstepperday<-sumstepsinterval$sum/nrow(sumsteps)\n#build interval string for time by additing 10000 to each interval.\n#this will allows taking the 2&3 values as hours and the 4&5 values\n#as minutes without incurring an error from the earlier time intervals.\nsumstepsinterval$K<-sumstepsinterval$interval+10000 \n#Get max avg step per day info \nmaxavgstepperday<-sumstepsinterval[which(sumstepsinterval[, 3] == max(sumstepsinterval$avgstepperday)), ]\n \n\n#Calculate time of day from 5-minute interval\nt<-as.POSIXlt(\"1970-01-01 00:00:00 PST\") #initialize time\ntmpmin<-substr(toString(maxavgstepperday$K),4,5)\ntmphour<-substr(toString(maxavgstepperday$K),2,3)\nt$min<-t$min + as.numeric(tmpmin)\nt$hour<-t$hour+as.numeric(tmphour)\ntcvt<-strftime(t, format = \"%I:%M:%S %p\")\n```\n\n\n## What is the average daily activity pattern?\n### Weekday Activity\nThere are `r nrow(sumstepsinterval)` 5-minute time intervals ranging from 0 to 2355. The x-axis corresponds to the specific interval break points found in the data set.\n```{r}\nplot(sumstepsinterval$avgstepperday,type=\"l\", xaxt=\"n\",  xlab=\"5-minute step intervals\", ylab=\"Avg steps per day\", main=\"Average Daily Activity\")\naxis(1, at=c(1,49,97,145,193,241,288), labels=c(\"12:00 am\",\"4:00\",\"8:00\",\"12:00 pm\",\"4:00\",\"8:00\",\"12:00 am\"))\n \n```\n\n- The time inteval ''`r paste(maxavgstepperday$interval,maxavgstepperday$interval+5,sep=\"-\")`'' contains the highest average number of steps at: <b>`r round(maxavgstepperday$avgstepperday,2)`</b> per day\n\n- The most popular time of day for stepping is:<b> `r tcvt`</b>.\n\n(note: The data contains 12 5-minute groups per hour (0-55). After reaching the 12th member of the group (interval ending in 55), the interval's hundred digit is incremented representing the current hour (i.e. The interval 100=1:00 am, 105=1:05 am ... 2355 = 11:55 pm.))\n\n \n## Imputing missing values\n```{r}\n#Get NA count from original data set\nsumna<-sum(is.na(dfactivity$step))\n#Create NA subset of dfactivity\ndfisna<-dfactivity[is.na(dfactivity[,1])==T,]\n#Join on sumstepsinterval$interval return \najoin<-merge(dfisna, sumstepsinterval, by=\"interval\")\n#update NA steps with avg step per day for interval\najoin$steps<-ajoin$avgstepperday\n#Row bind dfactnaf with ajoin data frame to build completely filled\n#version of the original data set (dfactivity)\ntempactivity<-rbind(dfactnaf, ajoin[,c(1:4)])\nnewactivity<-arrange(tempactivity, id) \n  \n```\n- There are <b>`r sumna`</b> missing values (NAs) in the main data set of <b>`r nrow(dfactivity)`</b> records.\n\nCreate data for Histogram containing average step values for all NAs in original data set.\n```{r}\n#Populate variables for histogram and averages\ngrp3 <- group_by(newactivity, date) #Group by date\nsumsteps3<-summarise(grp3, sum=sum(steps)) #sum steps by day\n\n#Calclate mean and median outputs\nmeanperday3<-mean(sumsteps3$sum)  #calculate mean steps per day\nmedianperday3<-median(sumsteps3$sum) #calculate median steps per day\n```\n\n\n```{r}\n#histogram of steps per day\nhist(sumsteps3$sum, main=\"Steps per day\",ylab=\"Frequency\", xlab=\"Steps\", breaks=nrow(sumsteps3), col=\"red\") \n\n```\n- The average (mean) number of steps is <b>`r format(meanperday3, big.mark=\",\")`</b> over `r nrow(sumsteps3)` days.\n- The median number of steps is <b>`r format(medianperday3, big.mark=\",\")`</b> over `r nrow(sumsteps3)` days.\n\n## Are there differences in activity patterns between weekdays and weekends?\n```{r}\n#Create field for identifying weekdays and weekend (weekday)\nnewactivity$weekday[isWeekday(newactivity$date) == T] <- \"Weekday\"\nnewactivity$weekday[isWeekday(newactivity$date) == F] <- \"Weekend\"\n#create data frames separating weekday and weekends\ndfweekend<-newactivity[which(newactivity[, 5] == \"Weekend\"), ]\ndfweekday<-newactivity[which(newactivity[, 5] == \"Weekday\"), ]\n  \n```\n\n\n\n\n```{r}\ngrp4<-group_by(dfweekend,interval) #Group by interval\nwesumstepsinterval<-summarise(grp4, sum=sum(steps)) #average steps by interval\nwesumstepsinterval$avgstepperdaywe<-wesumstepsinterval$sum/nrow(sumsteps)\n#build interval string for time by additing 10000 to each interval.\n#this will allows taking the 2&3 values as hours and the 4&5 values\n#as minutes without incurring an error from the earlier time intervals.\nwesumstepsinterval$K<-wesumstepsinterval$interval+10000 \n#Get max avg step per day info \nmaxavgstepperday3<-wesumstepsinterval[which(wesumstepsinterval[, 3] == max(wesumstepsinterval$avgstepperdaywe)), ]\n\n\n```\n\n\n```{r}\ngrp5<-group_by(dfweekday,interval) #Group by interval\nwdsumstepsinterval<-summarise(grp5, sum=sum(steps)) #average steps by interval\nwdsumstepsinterval$avgstepperdaywd<-wdsumstepsinterval$sum/nrow(sumsteps)\n#build interval string for time by additing 10000 to each interval.\n#this will allows taking the 2&3 values as hours and the 4&5 values\n#as minutes without incurring an error from the earlier time intervals.\nwdsumstepsinterval$K<-wdsumstepsinterval$interval+10000 \n#Get max avg step per day info \nmaxavgstepperday4<-wdsumstepsinterval[which(wdsumstepsinterval[, 3] == max(wdsumstepsinterval$avgstepperdaywd)), ]\n\n\n```\n\n\n\n\n \n```{r}\n##################  Plot 4 Charts ###########################################\n#plot 4) - 4 line plots on single image\n \n#attach(sumstepsintervalwd)\npar(mfrow=c(2,1))\npar(pin=c(5,1.5))\n#First plot Weekend scaled to maximum weekday\nplot(wesumstepsinterval$avgstepperdaywe,type=\"l\", ylim=c(0,max(wdsumstepsinterval$avgstepperdaywd)), xaxt=\"n\",  xlab=\"5-minute step intervals\", ylab=\"Avg steps per day\", main=\"Average Weekend Daily Activity\")\naxis(1, at=c(1,49,97,145,193,241,288), labels=c(\"12:00 am\",\"4:00\",\"8:00\",\"12:00 pm\",\"4:00\",\"8:00\",\"12:00 am\"))\n#Second plot weekday\nplot(wdsumstepsinterval$avgstepperdaywd,type=\"l\", xaxt=\"n\",  xlab=\"5-minute step intervals\", ylab=\"Avg steps per day\", main=\"Average Weekday Daily Activity\")\naxis(1, at=c(1,49,97,145,193,241,288), labels=c(\"12:00 am\",\"4:00\",\"8:00\",\"12:00 pm\",\"4:00\",\"8:00\",\"12:00 am\"))\n\n \n\n \n##################  End Plot 4 Charts ######################################\n```\n\n\n\n\n\n\n ",
    "created" : 1423529473810.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "828368743",
    "id" : "6C722A58",
    "lastKnownWriteTime" : 1423850860,
    "path" : "C:/__edu/Git/RepData_PeerAssessment1/PA1_template.Rmd",
    "project_path" : "PA1_template.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}